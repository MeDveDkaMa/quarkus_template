# Configuration file
# key = value
# configure your datasource
#quarkus.datasource.url=jdbc:postgresql:elytron_security_jdbc
quarkus.datasource.url = jdbc:postgresql://localhost:5432/testdb
quarkus.datasource.driver = org.postgresql.Driver
quarkus.datasource.username = admin2
quarkus.datasource.password = 12345
quarkus.hibernate-orm.log.sql = true


quarkus.security.jdbc.enabled=true
#quarkus.security.jdbc.principal-query.sql=SELECT u.password, u.role FROM test_user u WHERE u.username=?
#quarkus.security.jdbc.principal-query.sql=SELECT u.password, u.role FROM test_user u WHERE u.username=?
#quarkus.security.jdbc.principal-query.sql=SELECT client.password, role.rolename FROM client,role WHERE client.username=?
quarkus.security.jdbc.principal-query.sql=SELECT u.password, u.id FROM client u WHERE email=?
quarkus.security.jdbc.principal-query.clear-password-mapper.enabled=true
quarkus.security.jdbc.principal-query.clear-password-mapper.password-index=1
#quarkus.security.jdbc.principal-query.attribute-mappings.0.index=2
#quarkus.security.jdbc.principal-query.attribute-mappings.0.to=groups


quarkus.security.jdbc.principal-query.roles.sql=SELECT r.rolename FROM role r, client a WHERE a.email=? AND a.role_id = r.id
quarkus.security.jdbc.principal-query.roles.attribute-mappings.0.index=1
quarkus.security.jdbc.principal-query.roles.attribute-mappings.0.to=groups


# drop and create the database at startup (use `update` to only update the schema)
quarkus.hibernate-orm.database.generation=update
#quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.sql-load-script=import.sql
quarkus.resteasy.gzip.enabled=true 
quarkus.resteasy.gzip.max-input=10M 
quarkus.http.cors=true

#
#quarkus.oauth2.client-id=backend-service
#quarkus.oauth2.client-secret=secret
#quarkus.oauth2.introspection-url=http://localhost:8180/auth/realms/quarkus


#quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus
#quarkus.oidc.client-id=backend-service
#quarkus.oidc.credentials.secret=secret